useDynLib(S4Arrays)

import(methods)
importFrom(stats, setNames)
importClassFrom(Matrix, dgCMatrix, lgCMatrix, dgRMatrix, lgRMatrix)
importFrom(Matrix, sparseMatrix, crossprod, tcrossprod)
importFrom(crayon, make_style)

import(BiocGenerics)
import(MatrixGenerics)
import(S4Vectors)
import(IRanges)
import(XVector)


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Export S4 classes
###

exportClasses(
    ## ArraySelection-class.R:
    #ArraySelection, COOList, LongCOOList,
    #NULL_OR_integer_OR_list, SelectionTree,

    ## Array-class.R:
    Array,

    ## ArrayGrid-class.R:
    ArrayViewport, DummyArrayViewport, SafeArrayViewport,
    ArrayGrid, DummyArrayGrid, ArbitraryArrayGrid, RegularArrayGrid,

    ## SparseArray-class.R:
    SparseArray, SparseMatrix,

    ## COO_SparseArray-class.R:
    COO_SparseArray, COO_SparseMatrix,

    ## SVT_SparseArray-class.R:
    NULL_OR_list, SVT_SparseArray, SVT_SparseMatrix
)


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Export S3 methods
###

S3method(aperm, DummyArrayGrid)
S3method(aperm, ArbitraryArrayGrid)
S3method(aperm, RegularArrayGrid)
S3method(aperm, COO_SparseArray)

S3method(as.array, Array)
S3method(as.array, COO_SparseArray)
S3method(as.array, SVT_SparseArray)

S3method(as.character, Array)
S3method(as.character, ArrayGrid)

S3method(as.complex, Array)

S3method(as.data.frame, Array)

S3method(as.integer, Array)

S3method(as.logical, Array)

#S3method(as.matrix, SelectionTree)
S3method(as.matrix, Array)

S3method(as.numeric, Array)

S3method(as.raw, Array)

S3method(as.vector, Array)

S3method(mean, SparseArray)

S3method(range, COO_SparseArray)
S3method(range, SVT_SparseArray)

S3method(rowsum, dgCMatrix)

S3method(t, Array)
S3method(t, SVT_SparseMatrix)

### We also export them thru the export() directive so that (a) they can be
### called directly, (b) tab-completion on the name of the generic shows them,
### and (c) methods() doesn't asterisk them.

export(
    aperm.DummyArrayGrid,
    aperm.ArbitraryArrayGrid,
    aperm.RegularArrayGrid,
    aperm.COO_SparseArray,

    as.array.Array,
    as.array.COO_SparseArray,
    as.array.SVT_SparseArray,

    as.character.ArrayGrid,
    as.character.Array,

    as.complex.Array,

    as.data.frame.Array,

    as.integer.Array,

    as.logical.Array,

    as.matrix.Array,
    #as.matrix.SelectionTree,

    as.numeric.Array,

    as.raw.Array,

    as.vector.Array,

    mean.SparseArray,

    range.COO_SparseArray,
    range.SVT_SparseArray,

    rowsum.dgCMatrix,

    t.Array,
    t.SVT_SparseMatrix
)


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Export S4 methods for generics not defined in S4Arrays
###

exportMethods(
    ## Methods for generics defined in the base package:
    length,
    dim, dimnames,
    drop,
    "[", "[<-",
    "[[",
    lengths,
    as.array, as.matrix, as.data.frame, as.vector,
    as.logical, as.integer, as.numeric, as.complex, as.character, as.raw,
    t,
    which,
    min, max, range, sum, prod, any, all,   # "Summary" group generic
    mean,
    anyNA,
    var,
    nchar,
    crossprod,

    ## Methods for generics defined in the methods package:
    coerce, show,

    ## Methods for generics defined in the BiocGenerics package:
    cbind, rbind,
    dims,
    type, "type<-",

    ## Methods for generics defined in the S4Vectors package:
    bindROWS,
    showAsCell, isEmpty,

    ## Methods for generics defined in the IRanges package:
    ranges, start, end, width
)


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Export non-generic functions
###

export(
    ## aperm2.R:
    aperm2,

    ## ArraySelection-class.R:
    #SelectionTree,

    ## array_selection.R:
    Lindex2Mindex, Mindex2Lindex,

    ## ArrayGrid-class.R:
    DummyArrayViewport, ArrayViewport, makeNindexFromArrayViewport,
    DummyArrayGrid, ArbitraryArrayGrid, RegularArrayGrid,

    ## SparseArray-class.R:
    sparsity,

    ## COO_SparseArray-class.R:
    COO_SparseArray, dense2sparse, sparse2dense,

    ## SVT_SparseArray-class.R:
    SVT_SparseArray, SparseArray,

    ## randomSparseArray.R:
    randomSparseArray, randomSparseMatrix,
    poissonSparseArray, poissonSparseMatrix,

    ## readSparseCSV.R:
    readSparseCSV, readSparseTable
)


### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### Export S4 generics defined in S4Arrays, and corresponding methods
###

export(
    ## aperm2.R:
    aperm,

    ## abind.R:
    arbind, acbind,

    ## sparseMatrix-utils.R:
    rowsum, colsum,

    ## extract_array.R:
    extract_array,

    ## ArrayGrid-class.R:
    refdim, maxlength, downsample,

    ## SparseArray-class.R:
    is_sparse, "is_sparse<-", nzcount,

    ## COO_SparseArray-class.R:
    nzcoo, nzvals,

    ## SparseArray-subsetting.R:
    extract_sparse_array
)

### Same list as above.
exportMethods(
    aperm,
    arbind, acbind,
    rowsum, colsum,
    extract_array,
    refdim, maxlength, downsample,
    is_sparse,
    #"is_sparse<-",  # no methods defined in S4Arrays!
    nzcount,
    nzcoo, nzvals,
    extract_sparse_array
)

